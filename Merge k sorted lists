from typing import List, Optional
import heapq

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

# Function to merge k sorted linked lists
def mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:
    # Create a min-heap
    min_heap = []

    # Initialize the heap with the first node of each linked list
    for l in lists:
        if l:
            heapq.heappush(min_heap, (l.val, l))

    # Dummy node to help build the result list
    dummy = ListNode()
    current = dummy

    # Process the heap and build the merged sorted linked list
    while min_heap:
        val, node = heapq.heappop(min_heap)
        current.next = ListNode(val)
        current = current.next
        if node.next:
            heapq.heappush(min_heap, (node.next.val, node.next))

    return dummy.next

# Helper function to convert an array into a linked list
def build_linked_list(arr):
    dummy = ListNode()
    current = dummy
    for val in arr:
        current.next = ListNode(val)
        current = current.next
    return dummy.next

# Helper function to print the linked list
def print_linked_list(node):
    while node:
        print(node.val, end=" -> " if node.next else "\n")
        node = node.next

# Example usage:
lists = [[1, 4, 5], [1, 3, 4], [2, 6]]

# Convert the 2D list into a list of ListNode objects
linked_lists = [build_linked_list(l) for l in lists]

# Merge the lists
merged_list = mergeKLists(linked_lists)

# Print the merged sorted linked list
print_linked_list(merged_list)
