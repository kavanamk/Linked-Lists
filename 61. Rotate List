# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if not head or not head.next or k==0:
            return head
        h=head

        length = 1
        tail = head
        while tail.next:
            tail = tail.next
            length += 1

        # Step 2: Compute the effective number of rotations needed
        k = k % length
        if k == 0:
            return head

        for i in range(0,k):
            
            cur=head
            while head.next.next!=None:
                cur=cur.next
                head=head.next
            
            #print(cur.val)
            temp=cur.next
            temp.next=h
            cur.next=None
            head=temp
            h=temp

        return head



       
        

l1=ListNode(0)
l2=ListNode(1)
l3=ListNode(2)
l1.next=l2
l2.next=l3
obj=Solution()
head=obj.rotateRight(l1,2)

while head:
        print(head.val)
        head=head.next
