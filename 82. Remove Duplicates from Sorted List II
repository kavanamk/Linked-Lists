class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


class Solution(object):
    def deleteDuplicates(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head or not head.next:
            return head

        # Dummy node to handle edge cases like deleting the head
        dummy = ListNode(0)
        dummy.next = head
        prev = dummy
        current = head
        
        while current:
            # Check if current node is a duplicate
            if current.next and current.val == current.next.val:
                # Skip all duplicates
                while current.next and current.val == current.next.val:
                    current = current.next
                # Connect the previous node to the node after the duplicates
                prev.next = current.next
            else:
                # Move the prev pointer only if no duplicate was found
                prev = prev.next
            current = current.next

        return dummy.next


# Creating the linked list 1 -> 1 -> 2 -> 3 -> 3 -> 4 -> 5
l1 = ListNode(1)
l2 = ListNode(1)
l3 = ListNode(2)
l4 = ListNode(3)
l5 = ListNode(3)
l6 = ListNode(4)
l7 = ListNode(5)

l1.next = l2
l2.next = l3
l3.next = l4
l4.next = l5
l5.next = l6
l6.next = l7

# Running the solution
obj = Solution()
head = obj.deleteDuplicates(l1)

# Printing the result
while head:
    print(head.val)
    head = head.next
